apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def uuid() {
    return "---" + UUID.randomUUID().toString()
}

def branch() {
    try {
        Process process = Runtime.getRuntime().exec("git status")
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()))
        String line
        String matchBranch = "On branch "
        String matchTag = "HEAD detached at "
        while ((line = bufferedReader.readLine()) != null) {
            int index = line.indexOf(matchBranch)
            if (index >= 0) index += matchBranch.length()
            else if (index < 0) {
                index = line.indexOf(matchTag)
                if (index >= 0) index += matchTag.length()
            }
            if (index >= 0) {
                StringBuilder sb = new StringBuilder()
                for (int i = index; i < line.length(); i++) {
                    char c = line.charAt(i)
                    if (c == ' ')
                        if (sb.length == 0) continue
                        else {
                            return sb.toString()
                        }
                    sb.append(c)
                }
                return sb.toString()
            }
        }
    } catch (Exception e) {
        return "unknown"
    }
}

android {
    compileSdkVersion 25

    defaultConfig {
        applicationId "com.cnksi.sjjc"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode VERSION_CODE as int
        versionName VERSION_NAME
        vectorDrawables.useSupportLibrary = true
    }
    dataBinding {
        enabled true
    }
    signingConfigs {
        release {
            keyAlias "四川金信石技术有限公司"
            keyPassword "kingston"
            storeFile file("kingston.keystore")
            storePassword "kingston"
        }
    }
    // 移除lint检查的error
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            buildConfigField 'boolean', "USE_NETWORK_SYNC", "true"
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "String", "SYNC_APP_ID", "\"${SYNC_APP_ID}\""
            buildConfigField "String", "SYNC_URL", "\"${SYNC_URL}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            shrinkResources false//需要同minifyEnabled 共同使用
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                //修改apk输出路径
                variant.getPackageApplication().outputDirectory = new File("E:\\CompanyProjectNew\\SJJCAPK")
                variant.outputs.all { output ->
                    if (variant.buildType.name == "release") {
                        def fileName = "sjjc_${defaultConfig.versionCode}_${defaultConfig.versionName}_${releaseTime()}_release.apk"
                        outputFileName = fileName
                    } else {
                        def fileName = "sjjc_${defaultConfig.versionName}_debug.apk"
                        outputFileName = fileName
                    }
                }
            }
        }
        debug {
            buildConfigField 'boolean', "USE_NETWORK_SYNC", "true"
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "String", "SYNC_APP_ID", "\"pms_nxszs\""
            buildConfigField "String", "SYNC_URL", "\"http://127.0.0.1:58888\""
        }
    }

//需要编译的源码
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            java.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/aidl', 'src/main/aidl/']
            res.srcDirs = ['src/main/res', 'res/gztz', 'src/main/res/gztz']
        }
    }
//打开泛型和过时API编译报警�?相关知识 http://blog.csdn.net/lzhw1985/article/details/3870391
    tasks.withType(JavaCompile) {
        //-Xlint:none 关闭所有警�?
//        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.compilerArgs << "-Xlint:none"
    }

    compileOptions {
        sourceCompatibility org.gradle.api.JavaVersion.VERSION_1_7
        targetCompatibility org.gradle.api.JavaVersion.VERSION_1_7
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

}

repositories { flatDir { dirs 'libs' } }
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':cnksicore')
//    compile project(':bdloc')
    compile(name: 'flironesdk', ext: 'aar')
    compile('com.cnksi:ksynclib:3.1.8') {
        exclude module: 'fastjson'
    }
    compile project(':autolayout')
    compile 'com.android.support:cardview-v7:25.3.1'
    compile project(':tts')
    compile 'com.cnksi:bdloc:1.1.7.6'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:design:25.3.1'
    compile 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.3'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.google.code.gson:gson:2.2.4'
    implementation files('libs/commons-codec-1.10.jar')
}
